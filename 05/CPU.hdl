// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // compare
    Not(in=isZero, out=notZero);
    Not(in=isNegative, out=notNegative);
    Or(a=isZero, b=notNegative, out=GE);
    And(a=notZero, b=notNegative, out=GT);
    Or(a=isZero, b=isNegative, out=LE);
    And(a=notZero, b=isNegative, out=LT);

    // Program Counter
    Register(in=outMuxPc, load=true, out[0..14]=pc, out=previousPc);
    Inc16(in=previousPc, out=incPreviousPc);
    Mux16(a=incPreviousPc, b=previousAddressM, sel=GT, out=outGTPc);
    Mux16(a=incPreviousPc, b=previousAddressM, sel=isZero, out=outEQPc);
    Mux16(a=incPreviousPc, b=previousAddressM, sel=GE, out=outGEPc);
    Mux16(a=incPreviousPc, b=previousAddressM, sel=LT, out=outLTPc);
    Mux16(a=incPreviousPc, b=previousAddressM, sel=notZero, out=outNEPc);
    Mux16(a=incPreviousPc, b=previousAddressM, sel=LE, out=outLEPc);
    Mux8Way16(a=incPreviousPc, b=outGTPc, c=outEQPc, d=outGEPc, e=outLTPc, f=outNEPc, g=outLEPc, h=previousAddressM, sel=instruction[0..2], out=outBranchingPc);
    Mux16(a=incPreviousPc, b=outBranchingPc, sel=instruction[15], out=outNonResetPc);
    Mux16(a=outNonResetPc, b[0]=false, b[1]=false, b[2]=false, b[3]=false, b[4]=false, b[5]=false, b[6]=false, b[7]=false, b[8]=false, b[9]=false, b[10]=false, b[11]=false, b[12]=false, b[13]=false, b[14]=false, b[15]=false, sel=reset, out=outMuxPc);

    
    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);
    
    // Set Address Register 
    Mux4Way16(a=instruction, b=instruction, c=previousAddressM, d=outALU, sel[0]=instruction[5], sel[1]=instruction[15], out=outMuxAddress);
    ARegister(in=outMuxAddress, load=true, out[0..14]=addressM, out=previousAddressM);

    // Set D Register
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    // Set up ALU
    Mux16(a=previousAddressM, b=inM, sel=instruction[12], out=outMorA);
    ALU(x=outD, y=outMorA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=isZero, ng=isNegative, out=outM);
}
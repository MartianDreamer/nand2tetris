// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Zero x
    Not(in=zx, out=Notzx);
    And16(a=x, b[0]=Notzx, b[1]=Notzx, b[2]=Notzx, b[3]=Notzx, b[4]=Notzx, b[5]=Notzx, b[6]=Notzx,b[7]=Notzx,b[8]=Notzx,b[9]=Notzx, b[10]=Notzx, b[11]=Notzx, b[12]=Notzx, b[13]=Notzx, b[14]=Notzx,b[15]=Notzx, out=Zerox);
    // Negate x
    Not16(in=Zerox, out=Negatex);
    Mux16(a=Zerox, b=Negatex, sel=nx, out=Finalx);
    // Zero y
    Not(in=zy, out=Notzy);
    And16(a=y, b[0]=Notzy, b[1]=Notzy, b[2]=Notzy, b[3]=Notzy, b[4]=Notzy, b[5]=Notzy, b[6]=Notzy,b[7]=Notzy,b[8]=Notzy,b[9]=Notzy, b[10]=Notzy, b[11]=Notzy, b[12]=Notzy, b[13]=Notzy, b[14]=Notzy,b[15]=Notzy, out=Zeroy);
    // Negate y
    Not16(in=Zeroy, out=Negatey);
    Mux16(a=Zeroy, b=Negatey, sel=ny, out=Finaly);
    // Compute out
    Add16(a=Finalx, b=Finaly, out=Addout);
    And16(a=Finalx, b=Finaly, out=Andout);
    Mux16(a=Andout, b=Addout, sel=f, out=fout);
    // Negate out
    Not16(in=fout, out=Negateout);
    Mux16(a=fout, b=Negateout, sel=no, out=out, out[15]=ng, out[0..7]=low8, out[8..15]=high8);
    // zr
    Or8Way(in=low8, out=low);
    Or8Way(in=high8, out=high);
    Or(a=low, b=high, out=iszero);
    Not(in=iszero, out=zr);
}